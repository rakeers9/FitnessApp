UI inspo - Nike run club, opal, pillowtalk

# AI Trainer Chatbot Tab — Product & Implementation Guide

This document gives you a complete, drop-in plan to add an **AI Trainer** tab to your fitness app. It covers UX, conversation flows, data contracts, prompt templates, and user experience rules for collection, confirmation, plan generation, persistence, and user education.

---

## 1) UX Goals

* Let users chat for training advice, it should be a new tab, the middle one named AI.
* When the user asks for a workout plan, the bot:

  1. **Confirms** it will generate a plan and **add workouts** to the user’s profile.
  2. If approved, **collects info** (goals, schedule, equipment, injuries, preferences, etc.).
  3. **Generates a plan** (days/week, split), **builds workouts** (exercises, sets/reps, rest), **assigns calendar days**, and **saves** to the user’s account.
  4. **Explains** how to follow the plan (progression, RIR/RPE, warm-ups, deloads).
  5. It should also mark the workouts in the correct dates in the calendar, marking each date where a workout needs to be done in black, and when you click on it it just shows that it is the workout planned.

---

## 2) Conversation Flow (State Machine)

```
States:
- IDLE
- PLAN_CONFIRM → PLAN_INFO_GATHER → PLAN_BUILDING → PLAN_PERSISTING → PLAN_EXPLAINED
- (Advice-only path stays in IDLE)

Transitions:
IDLE --(user asks for plan)--> PLAN_CONFIRM
PLAN_CONFIRM --(user approves)--> PLAN_INFO_GATHER
PLAN_CONFIRM --(user declines)--> IDLE
PLAN_INFO_GATHER --(enough info)--> PLAN_BUILDING
PLAN_BUILDING --(success)--> PLAN_PERSISTING
PLAN_PERSISTING --(saved ok)--> PLAN_EXPLAINED
PLAN_PERSISTING --(save fail)--> ERROR_HANDLING (offer retry/draft only)
```

### Trigger detection (heuristics/examples)

* **User intent to plan**: “make me a plan”, “program for 8 weeks”, “I need a push/pull/legs routine”, etc.
* If confidence < threshold, bot asks: *“Do you want a plan added to your profile, or general advice?”*

---

## 3) Consent & Safety Copy

**Confirmation prompt (exact copy):**

> I can build a personalized plan and add the workouts to your profile calendar. This will create scheduled workouts visible on your app. Proceed?
>
> **Yes, build it**  •  **Just give advice**

**Post-save summary (exact copy):**

> All set! I added your plan to your calendar. I’ll walk you through how to follow it and how to make changes anytime.

**Health disclaimer (show once per user):**

> I’m an AI assistant and not a medical professional. Always consider your personal health history and consult a qualified professional before starting a new program.

---

## 4) Information to Collect (minimal viable set)

* **Goal**: (e.g., fat loss / muscle gain / strength / endurance / general fitness)
* **Experience**: (beginner / intermediate / advanced)
* **Schedule**: days per week (2–6), specific available days
* **Session length**: (e.g., 30/45/60/90 minutes)
* **Equipment**: (gym / home; list: barbell, dumbbells, machines, bands, bodyweight only)
* **Constraints**: injuries, movements to avoid, time constraints
* **Preferences**: split type (full-body / upper-lower / PPL / body-part), favorite/avoid exercises
* **Start date**: default next Monday; user can edit
* **Plan length**: default 8 weeks

**Collection style**: fast bullet quick-replies + free-text fallback.

---

## 5) Plan Rules (what the generator must output)

### Plan structure

```json
{
  "plan": {
    "name": "8-Week Upper/Lower Hypertrophy",
    "start_date": "2025-09-08",
    "length_weeks": 8,
    "days_per_week": 4,
    "progression_model": "Double progression; increase reps within range before adding load",
    "notes": "RIR 1–2 on most sets; deload in week 5"
  },
  "workouts": [
    {
      "day_of_week": "Mon",
      "title": "Upper A",
      "estimated_minutes": 60,
      "exercises": [
        {
          "name": "Barbell Bench Press",
          "sets": 4,
          "reps": "6–10",
          "rir": 1,
          "rest_seconds": 120,
          "tempo": "2-0-1",
          "notes": "Warm-up sets first"
        },
        {
          "name": "One-Arm DB Row",
          "sets": 3,
          "reps": "8–12",
          "rir": 1,
          "rest_seconds": 90
        }
      ]
    }
  ],
  "calendar_assignments": [
    {"date": "2025-09-08", "workout_title": "Upper A"},
    {"date": "2025-09-09", "workout_title": "Lower A"},
    {"date": "2025-09-11", "workout_title": "Upper B"},
    {"date": "2025-09-12", "workout_title": "Lower B"}
  ]
}
```

### Content constraints

* Exercises must respect **equipment** and **constraints**.
* Each workout: 45–90 minutes unless user selects another duration.
* Include **rest\_seconds** per exercise.
* Provide **progression\_model** and **global plan notes** (RIR/RPE, deload timing, substitutions).
* Assign specific **dates** for the whole plan (e.g., 8 weeks × days/week).

---

## 6) Prompt Templates (LLM)

### a) System prompt (core behavior)

```
You are an AI personal trainer inside a fitness app. You can chat and give advice.
When the user confirms they want a plan, you MUST:
1) Collect missing info: goal, experience, days/week and available days, session length, equipment, constraints, preferences, start date, plan length.
2) Generate an 6–12 week plan (default 8) that fits their info.
3) Output JSON following the exact schema below with valid values and ISO dates.
4) Include rest times per exercise and a clear progression model.
5) Ensure all exercises are feasible with the user’s equipment and constraints.
6) Keep plan volume appropriate for the user’s experience and session length.
7) Also return a concise plain-language explanation after the JSON explaining how to follow the plan.
```

### b) JSON output instruction (tooling contract)

```
Return your answer in this order:
1) A single fenced code block with JSON matching the schema (no prose).
2) A short explanation (≤ 10 sentences) of how to follow the plan: progression, substitutions, deload, warm-ups.
```

### c) Few-shot user info → plan stub

Provide 1–2 internal examples to stabilize structure (not shown here for brevity).

---

## 7) Plan Preview & Edit UX (Human-Centered)

**Goals**

* Show a full preview (week grid ➜ workouts ➜ exercises with sets/reps/**rest**).
* Let the user **prompt the AI to edit** the draft (the AI must remember the current draft).
* Provide a **Confirm Plan** button that persists the latest draft exactly as shown.

### Interaction Model

1. Bot generates a **draft plan** → render preview.
2. User types follow-ups like “make Tuesday 45 min”, “swap lunges for leg press”, “PPL split”.
3. App sends the **current draft + user’s edit prompt** to the AI.
4. AI returns a **corrected plan** and a **diff summary**.
5. UI updates the preview; the **chat** also shows what changed.
6. User taps **Confirm Plan** to persist to profile and calendar.

### Persistence & Memory Rules

* Keep a single source of truth in state: the current plan draft, its version, and an edit log.
* Every edit request includes: `{ planVersion, currentPlan, userEditPrompt }` so the model always has the latest context.
* On successful edit, increment `planVersion` and append to `editLog`.

---

## 8) Post-Generation Explanation

After confirmation, the AI should provide a clear explanation covering:

* **Overview**: split, days/week, session length, expected weekly volume.
* **Progression**: how to progress (e.g., double-progression, % increases).
* **Warm-up**: general guidance and ramp-up sets.
* **Substitutions**: options if an exercise cannot be done.
* **Deload**: when and how (e.g., week 5 with reduced volume).
* **Safety**: reminders for constraints or common injuries.

---

## 9) QA & Guardrails

* **Validation**: reject plans with exercises requiring missing equipment.
* **Time budget**: ensure workouts fit the session length.
* **Calendar collisions**: handle overlapping workouts by adjusting dates.
* **Idempotency**: avoid duplicate plans being saved.

---

## 10) Example: Collected Profile → Plan Snippet

**Collected profile (user approved):**

```
goal: muscle gain; experience: beginner; days/week: 3; days: Mon/Wed/Fri; session: 45 min;
Equipment: DB + bands; constraints: avoid deep knee flexion; split: full-body;
Start: 2025-09-08; length: 8 weeks
```

**Expected workout example (1 day):**

```
Full Body A (45 min)
- Goblet Squat (range-limited) — 3×8–12 @ RIR 2, Rest 90s
- DB Bench Press — 4×8–12 @ RIR 1–2, Rest 120s
- 1-Arm DB Row — 3×10–12 @ RIR 1–2, Rest 90s
- DB RDL — 3×8–12 @ RIR 2, Rest 90s
- Band Face Pull — 2×12–15 @ RIR 2, Rest 60s
```

---

## 11) Analytics & Iteration

* Track: plan acceptance rate, save success rate, adherence (completed/assigned), edits per plan, time to first workout.
* Add “Regenerate with changes” and “Swap exercise” inline actions.

---

## 12) Launch Checklist

* Include confirmation and disclaimer copy.
* Validate JSON schema for every plan.
* Ensure preview, edit, and confirm flow is smooth.
* Calendar marks black dots on workout days.
* Roll out behind a feature flag.


